#lang racket

(define (fileAsList str)
  (string-split
    (string-trim
      (string-replace
        (string-replace
          (string-replace
            (string-replace (file->string str) "\n" " ") ;Read in the file as a string, replace all \n characters with a space
          "\r" " ") ;replace all \r characters with a space
        "(" "( ") ;separate left parentheses from whatever it is directly next to
      ")" " )") ;separate right parentheses from whatever it is directly next to
    " "))) ;split the string into a list with spaces as the separator


(define (program L)
  (if (first L)
  
  (if (lineList L)
      (println "ACCEPTED")
      ;(parseError)
      ))

(define (lineList L)
  (cond
    [(equal? 'err (first L)) #f]
    [(equal? 'idx (first L)) (lineList (line L))]
    [(equal? '$$ (first L)) #t]
    [else #f ;(parseError)
     ]))

(define (line L)
  (if (equal? (first L) 'idx)
      (linetail (stmt (rest L)))
      #f))
  ;parseError)

(define (stmt L)
  (cond
    [(equal? (first L) 'id)        (expr (rest (rest L)))] ;removes id and equals from front of list and passes that into expr   
    [(equal? (first L) 'if)        (stmt (rest (expr (rest L))))] ;removes if from front of list and passes that into expr, removes then from front of list returned by expr and passes that list into stmt    
    [(equal? (first L) 'read)      (rest (rest L))] ;removes read and id from front of list
    [(equal? (first L) 'write)     (expr (rest L))] ;removes write from front of list and passes that to expr
    [(equal? (first L) 'goto)      (rest (rest L))] ;removes goto and idx from front of list
    [(equal? (first L) 'gosub)     (rest (rest L))] ;removes gosub and idx from front of list
    [(equal? (first L) 'return) (rest L)]
    [else #f]))
  


(define (linetail L)
  (if (equal? 'colon (first L))
      (stmt (rest L));removes colon from front oif the list and passes list into stmt
      L))
      

(define (expr L)
  (cond
    [(equal? (first L) 'id)       (etail (rest L))] ;removes id from front of the list and passes list into etail
    [(equal? (first L) 'idx)      (etail (rest L))] ;removes idx from front of the list and passes list into etail
    [(equal? (first L) 'num)      (etail (rest L))] ;removes num from front of the list and passes list into etail
    [(equal? (first L) 'lparen)   (rest (expr (rest L)))] ;removes lparen from front of the list and passes list into etail then removes rparen from the list returned from etail
    [else #f]))

      
       
(define (etail L)
  (cond
    [(equal? (first L) 'plus)      (expr (rest L))];removes plus from the front of the list and passes list into expr
    [(equal? (first L) 'minus)     (expr (rest L))];removes minus from the front of the list and passes list into expr
    [(equal? (first L) 'equals)     (expr (rest L))];removes equals from the front of the list and passes list into expr
    
    [else L])) ;epsilon




(define (string-alphabetic? str) ;Algorithm from discussion board post
   (define (iter ch-list)
       (if (empty? ch-list)
          #t
          (if (char-alphabetic? (first ch-list))
              (iter (rest ch-list))
              #f)))
     (iter (string->list str)))

(define (string-numeric? str) ;Same as string-alphabetic? algortithm but tests for numbers only
  (define (iter ch-list)
    (if (empty? ch-list)
        #t
        (if (char-numeric? (first ch-list))
            (iter (rest ch-list))
            #f)))
  (iter (string->list str)))

(define (idxOrNum? str) ;checks if a number is and idx or a num
  (if (> (string->number str) 0)
      (list 'idx (string->number str))
      'num))
  

(define (flagger str)
  (cond
    [(string-numeric? str) (idxOrNum? str)] ;If the string is only numbers then return idx and original number
    [(string-alphabetic? str) ;if the string is fully alphabetic
      (cond
        [(equal? str "if") 'if]
        [(equal? str "then") 'then]
        [(equal? str "goto") 'goto]
        [(equal? str "gosub") 'gosub]
        [(equal? str "return") 'return]
        [(equal? str "read") 'read]
        [(equal? str "write") 'write]
        [else 'id])]
    [else
     (cond
        [(equal? str ":") 'colon]
        [(equal? str "(") 'lparen]
        [(equal? str ")") 'rparen]
        [(equal? str "$$") '$$]
        [(equal? str "+") 'plus]
        [(equal? str "-") 'minus]                     ;Correct files work error handling needs to be fixed and figure out a way to determine line number of error
        [(equal? str "=") 'equals]
        [else 'err])]))
    
    
(define (scanner tokens)
  (println tokens)
  (map flagger tokens))


(define (parse fileName)
  (program (scanner (fileAsList fileName))))

(parse "file01.txt")
;(println " ")
;(parse "file02.txt")
;(println " ")
;(parse "file03.txt")
;(println " ")
;(parse "file04.txt")
;(println " ")
;(parse "file05.txt")
;(println " ")
;(parse "file06.txt")